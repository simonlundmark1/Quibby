generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  score     Int       @default(0)
  rooms     Room[]    @relation("RoomPlayers")
  hostRooms Room[]    @relation("RoomHost")
  answers   Answer[]
  specialVotes SpecialVote[]
  gameScores GameScore[]
}

model Room {
  id            String    @id @default(uuid())
  code          String    @unique
  hostId        String
  host          User      @relation("RoomHost", fields: [hostId], references: [id])
  players       User[]    @relation("RoomPlayers")
  currentRound  Int       @default(0)
  status        String    @default("LOBBY") // LOBBY, QUESTION, ANSWERING, VOTING, RESULTS
  categories    String[]  @default([]) // Store categories as an array of strings
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  questions     Question[]
  gameScores    GameScore[]
}

model Question {
  id            String    @id @default(uuid())
  text          String
  correctAnswer String
  alternatives  String[]  @default([])  // Store AI-generated alternative answers
  roomId        String
  room          Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roundNumber   Int
  answers       Answer[]
  createdAt     DateTime  @default(now())
  specialVotes   SpecialVote[]
}

model Answer {
  id          String    @id @default(uuid())
  text        String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  votes       Int       @default(0)
  createdAt   DateTime  @default(now())
}

model SpecialVote {
  id          String   @id @default(cuid())
  questionId  String
  userId      String
  targetId    String   // 'correct' or 'ai-alt-X'
  createdAt   DateTime @default(now())
  
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([questionId, userId])
}

model GameScore {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roundNumber Int
  scoreValue  Int      @default(0)
  scoreType   String   // 'correct_guess', 'fooled_player', etc.
  createdAt   DateTime @default(now())
} 